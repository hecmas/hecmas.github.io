[{"authors":null,"categories":null,"content":"I am a PhD student in the Department of Network Engineering at the Polytechnic University of Catalonia (UPC). I hold a BSc in Mathematics from the University of Alicante (UA) and a MSc in Advanced Mathematics and Mathematical Engineering from the UPC, focusing on discrete mathematics. My research ranges from theoretical and applied cryptography to probabilistic proofs, with special interest in the applicability of Zero-Knowledge Proofs to improve the scalability of blockchains and authentication systems.\nIn my free time I enjoy doing cryptography-based CTF challenges in sites like CryptoHack, HackTheBox or CryptoPals. There is a big difference between theory-oriented (a.k.a., textbook) cryptography and real-world cryptography, so I feel like these challenges make me understand the link between these two worlds.\nDownload my Bachelor\u0026#39;s Degree Final Project (spanish).\nDownload my Master\u0026#39;s Degree Final Project. Download my Resume. ","date":1665705600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1665705600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a PhD student in the Department of Network Engineering at the Polytechnic University of Catalonia (UPC). I hold a BSc in Mathematics from the University of Alicante (UA) and a MSc in Advanced Mathematics and Mathematical Engineering from the UPC, focusing on discrete mathematics.","tags":null,"title":"H√©ctor Masip Ardevol","type":"authors"},{"authors":["H√©ctor Masip Ardevol"],"categories":["Blockchain","Cryptography"],"content":" Table of Contents Mathematical Background Cryptography Pure Cryptography Applications Elliptic Curve Cryptography Zero-Knowledge Proofs Blockchain Theory Solidity Computer Science Probability Recreational I will use the following colors to show my progress with the books:\nüîµ Blue means that I have read the book. üî¥ Red means that I am in progress. ‚ö´ Black means that I have not started yet but I am willing to. Mathematical Background ‚ö´ A Computational Introduction to Number Theory and Algebra [2008] - Victor Shoup üîµ Abstract Algebra: Theory and Applications [2021] - Thomas W. Judson (This book is updated yearly) Cryptography Pure Cryptography üîµ Handbook of Applied Cryptography [2001] - Menezes üîµ Understanding Cryptography: A Textbook for Students and Practitioners [2010] - Christof Paar and Jan Pelzl. Video lectures are available here ‚ö´ An Introduction to Mathematical Cryptography [2010] - Many Authors üîµ Cryptography Made Simple [2015] - Nigel Smart üîµ A Course in Cryptography [2019] - Heiko Knospe üî¥ A Graduate Course in Applied Cryptography [2020] - Dan Boneh and Victor Shoup (This book will be updated, it is in version 0.5) üî¥ Real-World Cryptography [2021] - David Wong Applications ‚ö´ Self-Sovereign Identity: Decentralized digital identity and verifiable credentials [2001] - Alex Preukschat and Drummond Reed ‚ö´ Cryptography Algorithms: A guide to algorithms in blockchain, quantum cryptography, zero-knowledge protocols, and homomorphic encryption [2022] - Massimo Bertaccini Elliptic Curve Cryptography üî¥ Elliptic Curves: Number Theory and Cryptography [2008] - Lawrence Washington üî¥ Pairings for Beginners [2012] - Craig Costello Zero-Knowledge Proofs ‚ö´ Bringing Zero-Knowledge Proofs of Knowledge to Practice [2012] - Stephan Krenn üî¥ Proofs, Arguments, and Zero-Knowledge [2022] - Justin Thaler (This book is not in final form) üî¥ ZKProof Community Reference v0.3 [2022] - Community Blockchain Theory üîµ Bitcoin and Cryptocurrency Technologies: A Comprehensive Introduction [2016] - Many Authors üîµ Mastering Bitcoin: Programming the Open Blockchain [2016] - Andreas M. Antonopoulos (second version of the book). The have created a Coursera course here üîµ Mastering Ethereum: Building Smart Contracts and Dapps [2018] - Andreas M. Antonopoulos and Gavin Wood (they are working in the second version) üîµ Mastering Monero: The future of private transactions [2018] - SerHack Solidity üî¥ Ethernaut - Learn by hacking smart contracts ‚ö´ CryptoZombies - Learn by building simple games Computer Science üîµ Computational Complexity: A Modern Approach [2009] - Sanjeev Arora and Boaz Barak üîµ Introduction to the Theory of Computation [2012] - Michael Sipser (Third edition) Probability üîµ A First Course in Probability [2013] - Sheldon Ross (Ninth edition) üîµ Probability Cheat Sheet [2022] - Geoffroy Couteau Recreational üîµ The Humble Programmer [1972] - Edsger Dijkstra ‚ö´ The Codebreakers: The Comprehensive History of Secret Communication from Ancient Times to the Internet [1997] - David Kahn üîµ The Code Book: The Science of Secrecy from Ancient Egypt to Quantum Cryptography [2000] - Simon Singh ","date":1665705600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1665705600,"objectID":"07ff4f9819564a17d925ebbb8713cef9","permalink":"https://hecmas.github.io/post/books/","publishdate":"2022-10-14T00:00:00Z","relpermalink":"/post/books/","section":"post","summary":"Learning cutting-edge research areas through books","tags":["Academic","Books"],"title":"Books for Cryptography and Blockchain","type":"post"},{"authors":["H√©ctor Masip Ardevol"],"categories":["SNARKs"],"content":" Table of Contents Notation Statement Example: Randomness is Necessary Alternatives $\\beta = \\alpha^2$ (or in general $\\beta = f(\\alpha)$) Only $\\alpha$ is used Only $\\beta$ is used When Both Random Values are Needed? Conclusion Notation We will denote by $\\mathbb{F}$ to a finite field and $\\mathbb{F}^*$ to its respective multiplicative group. We will also denote as $H$ to a subgroup of $\\mathbb{F}^*$. Finally, we will denote by $Z_H$ to the polynomial over $\\mathbb{F}$ that vanishes on $H$a and call it the vanishing polynomial.\nGiven a polynomial $p \\in \\mathbb{F}[X]$ and an evaluation domain $H$, we will denote by $\\tilde{p}$ to the polynomial resulting from the interpolation of the set of points ${(h, p(h)), \\text{ for } h \\in H}$.\nStatement Let $d,D \\in \\mathbb{N}$ such that $D \u0026gt; d$ and let $f \\in \\mathbb{F}[X]$. Let $g \\in \\mathbb{F}[X]$ be the polynomial defined as: $$ g(X) = f(X) + X^{D-d} \\cdot f(X). $$\nThen, if $\\tilde{f}$ has degree lower than $d$ then we have that $\\tilde{g}$ has degree lower than $D$ (Prove it! Hint: Divide $f$ by $Z_H$).\nIn our context, it is always the case that $D$ is a power of two and $d$ is not. What we intend with this ‚Äúdegree adjustment‚Äù is to form a polynomial lower than a power of two from a polynomial for which this is not the case.\nOne can imagine $D = 8$ and $d = 5$ so that we adjust the degree to the ‚Äúnext‚Äù power of two.\nTo achieve the converse, we need to involve random coefficients $\\alpha$ and $\\beta$ and define $g(X)$ in the following way: $$ g(X) = \\alpha \\cdot f(X) + \\beta \\cdot X^{D-d} \\cdot f(X). $$\nNow, we can claim that $\\tilde{f}$ has degree lower than $d$ if and only if $\\tilde{g}$ has degree lower than $D$.\nExample: Randomness is Necessary Let‚Äôs see why the converse is not true in the first definition of $g$.\nLet $\\mathbb{F} = \\mathbb{Z}_{97}$ (notably, $96 = 2^5 \\cdot 3$), let $\\omega = 8$ be a primitive $16$-th root of unity and let: $$ H = \\langle \\omega \\rangle = \\{ 1,8, 64, 27, 22, 79, 50, 12, 96, 89, 33, 70, 75, 18, 47, 85 \\} $$ be the subset of $\\mathbb{F}^*$, generated by $\\omega$, containing all the $16$-th roots of unity. We therefore have that $Z_H(X) = X^{16} - 1$ is the vanishing polynomial on $H$.\nAssume that $D = 8$ and $d = 5$.\nNow, let $f(X) = Z_H(X) + X^{14} - X^{11} + X^{8} - X^5$. We therefore have that: $$ f(X) \\equiv X^{14} - X^{11} + X^{8} - X^5 \\pmod{Z_H(X)}, $$ so that $f(X)$ behaves identical to $X^{14} - X^{11} + X^{8} - X^5$ when evaluated on $H$, implying that the interpolated polynomial $\\tilde{f}$ will be of degree $14$.\nIn this case, we have that: \\begin{align} g(X) = \u0026amp;~(Z_H(X) + X^{14} - X^{11} + X^{8} - X^5) \\\\\u0026amp; + X^3 \\cdot (Z_H(X) + X^{14} - X^{11} + X^{8} - X^5) = \\\\\u0026amp;(X^3 + 1)Z_H(X) + X^{17} - X^{5} = \\\\ \u0026amp;~(X^3 + X + 1)Z_H(X) - X^{5} + X, \\end{align} so that $g$ behaves identical to $-X^{5} + X$ when evaluated on $H$, implying that the interpolated polynomial $\\tilde{g}$ is of degree $5$.\nHence, $\\tilde{g}$ is a polynomial of degree $5 \u0026lt; D$ even that $\\tilde{f}$ is of degree $14 \u0026gt; d$.\nRandomness comes to the rescue!\nSay that $\\alpha = 3$ and $\\beta = 13$.\nIn this case we have: \\begin{align} g(X) = \u0026amp;~3 \\cdot (Z_H(X) + X^{14} - X^{11} + X^{8} - X^5) \\\\\u0026amp;+ 13 \\cdot X^3 \\cdot (Z_H(X) + X^{14} - X^{11} + X^{8} - X^5) \\\\ \u0026amp;= (13 \\cdot X^3 + 13 \\cdot X + 3)Z_H(X) \\\\\u0026amp;- 10 \\cdot X^{14} + 10 \\cdot X^{11} - 10 \\cdot X^{8} - 3 \\cdot X^5 + 13 \\cdot X, \\end{align} As it can be seen, thanks to the random values, now the high-degree terms do not cancel out and we find that $\\tilde{g}$ is a polynomial of degree ${14}$.\nAlternatives The following alternatives also work! We should assume however that the Prover cannot predict the randomness in advance.\n$\\beta = \\alpha^2$ (or in general $\\beta = f(\\alpha)$) $$ g(X) = \\alpha \\cdot f(X) + \\alpha^2 \\cdot X^{D-d} \\cdot f(X). $$ As far as $\\alpha \\neq \\alpha^2$ this alternative will also work and therefore we would save one random value in the process. However, notice that the probability of $\\tilde{g}$ being a low degree polynomial is of $1 - 2/|\\mathbb{F}|$, since both $\\alpha = 0$ and $\\alpha = 1$ would make it fail.\nIn general, all $\\alpha$‚Äôs that make $\\alpha = \\beta = f(\\alpha)$ would make it fail.\nOnly $\\alpha$ is used $$ g(X) = \\alpha \\cdot f(X) + X^{D-d} \\cdot f(X). $$ This should work as far $\\alpha \\neq 1$. The probability here is of $1 - 1/|\\mathbb{F}|$.\nOnly $\\beta$ is used $$ g(X) = f(X) + \\beta \\cdot X^{D-d} \\cdot f(X). $$ This should work as far $\\beta \\neq 1$. The probability here is of $1 - 1/|\\mathbb{F}|$.\nWhen Both Random Values are Needed? Say that we have $f_1,f_2 \\in \\mathbb{F}[X]$ and we define: $$ g(X) = (\\alpha_1 \\cdot f_1(X) + \\beta_1 \\cdot X^{D-d_1} \\cdot f_1(X)) + (\\alpha_2 \\cdot f_2(X) + \\beta_2 \\cdot X^{D-d_2} \\cdot f_2(X)). $$ Here we have that $\\tilde{g}$ is of degree lower than $D$ if and only if the degree of $\\tilde{f_1} \u0026lt; d_1$ and the degree of $\\tilde{f_2} \u0026lt; d_2$.\nWhen we include in the definition of $g$ more than one $f$ polynomial, then both randomness ‚Ä¶","date":1665532800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1665705600,"objectID":"3046de1355f11a0fcdb5919f87fdaf95","permalink":"https://hecmas.github.io/post/snark-degree/","publishdate":"2022-10-12T00:00:00Z","relpermalink":"/post/snark-degree/","section":"post","summary":"On adjusting the degree of SNARK-related polynomials to fit our needs","tags":["Academic"],"title":"Degree Adjustment in SNARKs","type":"post"},{"authors":["H√©ctor Masip Ardevol","Jordi Baylina Mel√©","Daniel Lubarov","Jose Luis Mu√±oz Tapia"],"categories":null,"content":" ","date":1660348800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660348800,"objectID":"7e98dbfe5d39d775fc16fe711891fc12","permalink":"https://hecmas.github.io/publication/preprint/2022/rapidup/","publishdate":"2022-08-13T00:00:00Z","relpermalink":"/publication/preprint/2022/rapidup/","section":"publication","summary":"SNARKs for some standard cryptographic primitives tend to be plenty designed with SNARK-unfriendly operations such as XOR. Previous protocols such as [Plookup](https://eprint.iacr.org/2020/315.pdf) worked around this problem by the introduction of lookup arguments. However, these protocols were only appliable over the same circuit. RapidUp is a protocol that solves this limitation by unfolding the grand-product polynomial into two (equivalent) polynomials of the same size. Morevoer, a generalization of previous protocols is presented by the introduction of selectors.","tags":null,"title":"RapidUp: Multi-Domain Permutation Protocol for Lookup Tables","type":"publication"},{"authors":["Luke Pearson","Joshua Fitzgerald","H√©ctor Masip Ardevol","Marta Bell√©s Mu√±oz","Jose Luis Mu√±oz Tapia"],"categories":null,"content":" ","date":1643068800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1643068800,"objectID":"660dd30e5a29245554b359960219f691","permalink":"https://hecmas.github.io/publication/preprint/2022/plonkup/","publishdate":"2022-01-25T00:00:00Z","relpermalink":"/publication/preprint/2022/plonkup/","section":"publication","summary":"In 2019, Gabizon, Williamson, and Ciobotaru introduced PlonK ‚Äì a fast and flexible ZK-SNARK with an updatable and universal structured reference string. PlonK uses a grand product argument to check permutations of wire values, and exploits convenient interactions between   multiplicative subgroups and Lagrange bases. The following year, Gabizon and Williamson used similar techniques to develop plookup ‚Äì a ZK-SNARK that can verify that each element from a list of queries can be found in a public lookup table. In this paper, we present PlonKup, a fully succinct ZK-SNARK that integrates the ideas from plookup into PlonK in an efficient way.","tags":null,"title":"PlonKup: Reconciling PlonK with plookup","type":"publication"}]